activitydefinition.erl:	subject :: special:'Reference'() | 'CodeableConcept'() | undefined,
activitydefinition.erl:	timing :: complex:'Timing'() | 'Range'() | 'Period'() | 'Duration'() | dateTime() | 'Age'() | undefined,
activitydefinition.erl:	product :: special:'Reference'() | 'CodeableConcept'() | undefined,
allergyintolerance.erl:	onset :: string() | 'Range'() | 'Period'() | dateTime() | 'Age'() | undefined,
careplan.erl:	schedule :: complex:'Timing'() | string() | 'Period'() | undefined,
careplan.erl:	product :: special:'Reference'() | 'CodeableConcept'() | undefined,
claim.erl:	serviced :: complex:'Period'() | date() | undefined,
claim.erl:	location :: special:'Reference'() | 'CodeableConcept'() | 'Address'() | undefined,
claim.erl:	location :: special:'Reference'() | 'Address'() | undefined}).
claim.erl:	procedure :: special:'Reference'() | 'CodeableConcept'(),
claim.erl:	diagnosis :: special:'Reference'() | 'CodeableConcept'(),
claim.erl:	timing :: complex:'Period'() | date() | undefined,
claim.erl:	value :: string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | boolean() | 'Attachment'() | undefined,
composition.erl:	target :: special:'Reference'() | 'Identifier'()}).
condition.erl:	onset :: string() | 'Range'() | 'Period'() | dateTime() | 'Age'() | undefined,
condition.erl:	abatement :: string() | 'Range'() | 'Period'() | dateTime() | 'Age'() | undefined,
consent.erl:	source :: special:'Reference'() | 'Attachment'() | undefined,
coverage.erl:	value :: complex:'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'Money'(),
diagnosticreport.erl:	effective :: complex:'Period'() | dateTime() | undefined,
explanationofbenefit.erl:	allowed :: unsignedInt() | string() | 'Money'() | undefined,
explanationofbenefit.erl:	used :: unsignedInt() | 'Money'() | undefined}).
explanationofbenefit.erl:	serviced :: complex:'Period'() | date() | undefined,
explanationofbenefit.erl:	loaction :: special:'Reference'() | 'CodeableConcept'() | 'Address'() | undefined,
explanationofbenefit.erl:	serviced :: complex:'Period'() | date() | undefined,
explanationofbenefit.erl:	location :: special:'Reference'() | 'CodeableConcept'() | 'Address'() | undefined,
explanationofbenefit.erl:	location :: special:'Reference'() | 'Address'() | undefined}).
explanationofbenefit.erl:	procedure :: special:'Reference'() | 'CodeableConcept'(),
explanationofbenefit.erl:	diagnosis :: special:'Reference'() | 'CodeableConcept'(),
explanationofbenefit.erl:	timing :: complex:'Period'() | date() | undefined,
explanationofbenefit.erl:	value :: string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | boolean() | 'Attachment'() | undefined,
goal.erl:	detail :: string() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | 'CodeableConcept'() | boolean() | undefined,
goal.erl:	use :: complex:'Duration'() | date() | undefined}).
goal.erl:	start :: date() | 'CodeableConcept'() | undefined,
group.erl:	value :: ,
immunization.erl:	p/doseN :: string() | positiveInt(),
immunization.erl:	p/seriesD :: string() | positiveInt() | undefined}).
immunization.erl:	occurence :: string() | dateTime(),
medicationrequest.erl:	substitution/allowed :: complex:'CodeableConcept'() | boolean(),
medicationrequest.erl:	reported :: special:'Reference'() | boolean() | undefined,
medicationrequest.erl:	medication :: special:'Reference'() | 'CodeableConcept'(),
observation.erl:	comp/value :: time() | string() | 'SampledData'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'Period'() | integer() | dateTime() | 'CodeableConcept'() | boolean() | undefined,
observation.erl:	effective :: complex:'Timing'() | 'Period'() | instant() | dateTime() | undefined,
observation.erl:	value :: time() | string() | 'SampledData'() | 'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'Period'() | integer() | dateTime() | 'CodeableConcept'() | boolean() | undefined,
plandefinition.erl:	relac/offset :: complex:'Range'() | 'Duration'() | undefined}).
plandefinition.erl:	action/subject :: special:'Reference'() | 'CodeableConcept'() | undefined,
plandefinition.erl:	action/timing :: complex:'Timing'() | 'Range'() | 'Period'() | 'Duration'() | dateTime() | 'Age'() | undefined,
plandefinition.erl:	action/definition :: uri() | canonical() | undefined,
plandefinition.erl:	quantity :: complex:'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | 'CodeableConcept'() | undefined,
plandefinition.erl:	action/subject :: special:'Reference'() | 'CodeableConcept'() | undefined,
procedure.erl:	performed :: string() | 'Range'() | 'Period'() | dateTime() | 'Age'() | undefined,
provenance.erl:	choice :: complex:'Period'() | dateTime() | undefined,
questionnaire.erl:	ao/value :: uri() | time() | string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | decimal() | dateTime() | date() | 'Coding'() | boolean() | 'Attachment'()}).
questionnaire.erl:  ini/value :: time() | string() | 'Reference'() | integer() | date() | 'Coding'(),
questionnaire.erl:	answer :: time() | string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | decimal() | dateTime() | date() | 'Coding'() | boolean()}).
questionnaireresponse.erl:	choice :: uri() | time() | string() | 'Reference'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | integer() | decimal() | dateTime() | date() | 'Coding'() | boolean() | 'Attachment'() | undefined,
requestgroup.erl:	offset :: complex:'Range'() | 'Duration'() | undefined}).
requestgroup.erl:	timing :: complex:'Timing'() | 'Range'() | 'Period'() | 'Duration'() | dateTime() | 'Age'() | undefined,
servicerequest.erl:	quantity :: complex:'Ratio'() | 'Range'() | 'Quantity'() | 'Duration'() | 'Age'() | 'Distance'() | 'Count'() | undefined,
servicerequest.erl:	occurrence :: complex:'Timing'() | 'Period'() | dateTime() | undefined,
servicerequest.erl:	asNeeded :: complex:'CodeableConcept'() | boolean() | undefined,
task.erl:	value :: any()
task.erl:	value :: any()
